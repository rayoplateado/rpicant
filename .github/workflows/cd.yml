name: Continuous Deployment
on:
  push:
    branches:
      - main

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  checks:
    name: Continous Deployment Checks
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgress
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    steps:
      - name: Install just task runner
        run: sudo snap install --edge --classic just
      - uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: ./client/package-lock.json
      - name: Install ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: ./server
      - name: Run checks
        run: just install lint test
        env:
          DATABASE_USER: postgress
          DATABASE_PASSWORD: password

  cd-server:
    name: Deploy server
    needs: checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login
      - name: Build and Push Docker Image
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web ./server/
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
      - name: Release Docker Image on Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}

  cd-client:
    name: Deploy Client
    needs: checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
